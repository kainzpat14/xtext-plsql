/*
 * generated by Xtext 2.25.0
 */
package sh.kainz.plsql.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import sh.kainz.plsql.plsql.PlsqlPackage
import sh.kainz.plsql.plsql.Select
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.EcoreUtil2
import sh.kainz.plsql.plsql.AlterTable
import java.util.ArrayList
import sh.kainz.plsql.plsql.Column

/** 
 * This class contains custom scoping description.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class PlsqlScopeProvider extends AbstractPlsqlScopeProvider {
	override IScope getScope(EObject context, EReference reference) {
		if (reference == PlsqlPackage.Literals.SELECT__COLUMNS) {
			val select = context as Select
			val table = select.table
			//val rootElement = EcoreUtil2.getRootContainer(context)
			//val candidates = EcoreUtil2.getAllContentsOfType(rootElement, AlterTable)
			//val alterTableColumns = candidates.filter[it.table == table].map[it.columns].flatMap[it];
			val allColumns = new ArrayList<Column>(table.columns);
			//allColumns.addAll(alterTableColumns);
			return Scopes.scopeFor(allColumns)
		}
		return super.getScope(context, reference)
	}
}
