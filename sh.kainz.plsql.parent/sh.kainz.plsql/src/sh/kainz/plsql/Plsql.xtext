
grammar sh.kainz.plsql.Plsql hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate plsql "http://www.kainz.sh/plsql/Plsql"


Model:
	statements+=Statement*;
	
Statement:
	(Table | AlterTable | Select | TableDefinition) ';'
;

Table:
	'CREATE' 'TABLE' name=ID '('
		columns+= TableColumn+
	')'
;

//This is basically a hack, we will not be able to access other tables over db links, but we still need to type
// data, so this will provide us with it

TableDefinition: 
	'CREATE' 'TABLE' 'INTERFACE' name=ID '@' remote=Remote '('
		columns+= TableColumn+
	')'
;

Remote:
	ID ('.' ID)*
;

AlterTable: 
	'ALTER' 'TABLE' table=[Table] '('
		columns+= TableColumn+
	')'
;

TableColumn:
	name=ID type=SqlType
;

SqlType:
	Varchar2Type | NumberType
;

Varchar2Type:
	'VARCHAR2' '(' size=INT ')'
;

NumberType:
	'NUMBER' '(' size=INT (',' precision=INT)? ')'
;
//https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/img_text/select.html
Select:
	TopLevelSubquery forupdate=FOR_UPDATE?
;


//https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/img_text/subquery.html
TopLevelSubquery:
	Subquery orderBy=OrderBy? rowLimiting=RowLimiting?
;

Subquery:
	(SetOperation | '(' sub=TopLevelSubquery ')') 
;

// https://docs.oracle.com/database/121/SQLRF/statements_10002.htm#BABBADDD
RowLimiting:
	offset=LimitingOffset | offset=LimitingOffset fetch=LimitingFetch | fetch=LimitingFetch
;

LimitingFetch:
	'FETCH' type=LimitingFetchType amount=LimitingFetchAmount rowType=LimitingRowType resolutionType=LimitingResolutionType
;

LimitingResolutionType:
	OnlyResolution | WithTiesResolution
;

OnlyResolution:
	'ONLY'
;

WithTiesResolution:
	'WITH' 'TIES'
;

LimitingFetchAmount:
	LimitingFetchCount | LimitingFetchPercent
;

LimitingFetchCount:
	count=INT
;

LimitingFetchPercent:
	percent=INT 'PERCENT'
;

LimitingFetchType:
	LimitingFetchFirst | LimitingFetchNext
;

LimitingFetchFirst:
	'FIRST'
;

LimitingFetchNext:
	'NEXT'
;

LimitingOffset:
	'OFFSET' offset=INT type=LimitingRowType
;

LimitingRowType:
	row='ROW' | rows='ROWS'
;


//https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/img_text/order_by_clause.html
OrderBy: 
	'ORDER' siblings='SIBLINGS'? 'BY' columns+=OrderByColumn+
;

OrderByColumn:
	SelectColumn sorting=Ordering?
;

Ordering: 
	sorting=OrderBySortationDirection | sorting=OrderBySortationDirection nullDirection=OrderByNullDirection | nullDirection=OrderByNullDirection
;

enum OrderBySortationDirection:
	asc='ASC' | desc='DESC'
;

OrderByNullDirection:
	OrderByDirectionNullsFirst | OrderByDirectionNullsLast
;

OrderByDirectionNullsFirst:
	'NULLS' 'FIRST'
;

OrderByDirectionNullsLast:
	'NULLS' 'LAST'
;

SetOperation:
	AtomicSubquery (({Union.left=current} 'UNION' all='ALL'? | 
			 {Intersection.left=current} 'INTERSECT' |
			 {SetSubstraction.left=current} 'MINUS'
			) right=Subquery)?
;

//used to get rid of left recursion
AtomicSubquery:
	Queryblock 
;

//https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/img_text/query_block.html
Queryblock: 
	withDefinition = WithDefinition?
	'SELECT' (all='ALL' | (distinct='DISTINCT' | unique='UNQIUE'))? columns+=SelectColumn+
	'FROM' source=SelectSources
;

//https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/SELECT.html#GUID-CFA006CA-6FF1-4972-821E-6996142A51C6__BABFAFID
WithDefinition:
	'WITH' /*TODO: plsql_declarations */ subqueries+=SubqueryFactoring /*TODO: ? */ /* TODO: SubAVFactoring */ (',' subqueries+=SubqueryFactoring)*
;

//https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/img_text/subquery_factoring_clause.html
SubqueryFactoring:
	 name=ID ('(' aliases+=ID (',' aliases+=ID)* ')')? 'AS' '(' query=TopLevelSubquery ')' search=SearchClause? cycle=CycleClause?
;

CycleClause:
	'CYCLE' columns+=ColumnExpression (',' columns+=ColumnExpression)* 'SET' cycleMarkAlias=ID 'TO' INT 'DEFAULT' INT
;

SearchClause:
	'SEARCH' searchType=SearchType 'FIRST' 'BY' searchColumns+=SearchColumn (',' searchColumns+=SearchColumn)* 'SET' orderingColumn=ColumnExpression 
;

SearchColumn:
	column=ColumnExpression sorting=Ordering? 
;

enum SearchType:
	depth='DEPTH' | 
	width='WIDTH'
;

// TODO: Table collection expression
SelectSources:
	first=SelectSource join=(Join)?
;
// Source: https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/SELECT.html#GUID-CFA006CA-6FF1-4972-821E-6996142A51C6
Join:
	(CrossJoin | ConditionalJoin) join=(Join)?
;

CrossJoin:
	type=CrossJoinType next=SelectSource
;

ConditionalJoin:
	joinType=ConditionalJoinType next=SelectSource condition=JoinCondition
;

JoinCondition:
	OnCondition | UsingCondition
;

OnCondition:
	{OnCondition} 'ON' 'TODO' //TODO: expression language
;

UsingCondition:
	'USING' '(' SelectColumn ')'
;

ConditionalJoinType:
	InnerJoin | OuterJoin
;

CrossJoinType:
	'CROSS' 'JOIN' | ',' | 'NATURAL' 'INNER'? 'JOIN'
;

InnerJoin:
	{InnerJoin} 'INNER' 'JOIN'
;

OuterJoin:
	{OuterJoin} direction=JoinDirection? 'OUTER' 'JOIN'
;

JoinDirection:
	left = 'LEFT' | right = 'RIGHT'
;


SelectSource:
	(TableReference | Subselect | RemoteTableReference) ('AS'? name=ID)?
;

TableReference: 
	table=[TableLike]
;

RemoteTableReference:
	table=[TableDefinition] '@' remote=Remote
;

TableLike: 
	Table | SubqueryFactoring
;

Subselect:
	'(' Subquery ')'
;

SelectColumn:
	SelectExpression ('AS' name=ID)?
;

SelectExpression:
	ColumnExpression | StringExpression
;

ColumnExpression:
	column=[Column | QualifiedName]
;

Column:
	SelectColumn | TableColumn
;

StringExpression:
	text=STRING
;

QualifiedName: 
	ID ('.' ID)*
;

terminal FOR_UPDATE:
	'FOR' 'UPDATE'
;

terminal ID: CASE_SENSITIVE_ID | CASE_INSENSITIVE_ID;
terminal CASE_INSENSITIVE_ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal CASE_SENSITIVE_ID: '"' !'"'* '"';
terminal INT returns ecore::EInt: ('0'..'9')+;
terminal STRING:
			"'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") | "''" )* "'"
		;
terminal ML_COMMENT : '/*' -> '*/';
terminal SL_COMMENT : '--' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS         : (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;


